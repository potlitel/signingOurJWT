using Microsoft.IdentityModel.JsonWebTokens;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;
using System.Security.Claims;
using System.Security.Cryptography;

namespace signingOurJWT.Samples
{
    public class HmacExample
    {
        private static RandomNumberGenerator Rng = RandomNumberGenerator.Create();
        private static DateTime Now = DateTime.Now;

        private static SecurityTokenDescriptor Jwt = new SecurityTokenDescriptor
        {
            Issuer = "www.mysite.com",
            Audience = "your-spa",
            IssuedAt = Now,
            NotBefore = Now,
            Expires = Now.AddHours(1),
            Subject = new ClaimsIdentity(new List<Claim>
            {
                new Claim(JwtRegisteredClaimNames.Email, "potlitel@gmail.com", ClaimValueTypes.Email),
                new Claim(JwtRegisteredClaimNames.GivenName, "Alain Jorge Acuña"),
                new Claim(JwtRegisteredClaimNames.Birthdate, "21 Mayo 1983"),
                new Claim(JwtRegisteredClaimNames.Sub, Guid.NewGuid().ToString())
            })
        };

        private static TokenValidationParameters TokenValidationParams = new TokenValidationParameters
        {
            ValidIssuer = "www.mysite.com",
            ValidAudience = "your-spa",
        };

        public static void Run()
        {
            var tokenHandler = new JsonWebTokenHandler();

            // HMAC Key
            var key = AutoGeneratedHmac(64);

            // Hmac Sha256
            Jwt.SigningCredentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);
            Console.WriteLine("Hmac Sha256");
            Console.WriteLine($"{tokenHandler.CreateToken(Jwt)}{Environment.NewLine}");

            // HMAC Sha 384
            key = AutoGeneratedHmac(128);
            Jwt.SigningCredentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha384);
            Console.WriteLine($"{tokenHandler.CreateToken(Jwt)}{Environment.NewLine}");

            // Hmac Sha 512
            Jwt.SigningCredentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha512);
            Console.WriteLine($"{tokenHandler.CreateToken(Jwt)}{Environment.NewLine}");
            var lastJws = tokenHandler.CreateToken(Jwt);

            // Store HMAC os Filesystem, recover and test if it's valid
            var jwk = JsonWebKeyConverter.ConvertFromSymmetricSecurityKey(key);
            jwk.KeyId = Guid.NewGuid().ToString();
            File.WriteAllText("current-hmac.key", JsonConvert.SerializeObject(jwk));

            var storedJwk = JsonConvert.DeserializeObject<JsonWebKey>(File.ReadAllText("current-hmac.key"));

            TokenValidationParams.IssuerSigningKey = storedJwk;

            var validationResult = tokenHandler.ValidateToken(lastJws, TokenValidationParams);

            Console.WriteLine(validationResult.IsValid);
        }

        private static SymmetricSecurityKey AutoGeneratedHmac(int bytes)
        {
            return new SymmetricSecurityKey(GenerateHmacKey(bytes));
        }

        private static byte[] GenerateHmacKey(int bytes)
        {
            byte[] data = new byte[bytes];
            Rng.GetBytes(data);
            return data;
        }
    }
}